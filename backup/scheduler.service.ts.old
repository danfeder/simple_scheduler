import { 
    Class, 
    Period, 
    ScheduleEntry,
    ScheduleConstraints,
    SchedulerConfig,
    ScheduleQualityMetrics,
    OptimizationResult,
    DayOfWeek,
    isClassAvailable,
    BlackoutPeriod,
    Conflict
} from '../../../../shared/types';

interface BacktrackingState {
    classIndex: number;
    schedule: ScheduleEntry[];
    scheduledPeriodsToday: Map<string, number>;
    scheduledPeriodsThisWeek: Map<string, number>;
}

export interface ISchedulerService {
    getSchedule(): ScheduleEntry[];
    initialize(classes: Class[]): Promise<void>;
    sortClassesByConstraints(classes: Class[]): Class[];
    scheduleWithBacktracking(sortedClasses: Class[], currentDate: Date, maxBacktracks?: number): Promise<boolean>;
    evaluateScheduleQuality(): ScheduleQualityMetrics;
    runOptimizationExperiment(classes: Class[], configs: SchedulerConfig[], iterationsPerConfig: number): Promise<OptimizationResult[]>;
}

export class SchedulerService implements ISchedulerService {
    private constraints: ScheduleConstraints;
    private startDate: Date;
    private schedule: ScheduleEntry[] = [];
    private classes: Class[] = [];
    private config: SchedulerConfig = {
        dayDistributionWeight: 0.5,
        spacingWeight: 0.5
    };

    constructor(startDate: Date, constraints: ScheduleConstraints) {
        this.startDate = startDate;
        this.constraints = constraints;
        this.schedule = [];
    }

    public getSchedule(): ScheduleEntry[] {
        return [...this.schedule];
    }

    public async initialize(classes: Class[]): Promise<void> {
        this.classes = classes.filter(c => c.active);
        this.schedule = [];
    }

    public sortClassesByConstraints(classes: Class[]): Class[] {
        return [...classes].sort((a, b) => 
            (b.defaultConflicts?.length || 0) - (a.defaultConflicts?.length || 0)
        );
    }

    private saveBacktrackingState(
        classIndex: number,
        schedule: ScheduleEntry[],
        scheduledPeriodsToday: Map<string, number>,
        scheduledPeriodsThisWeek: Map<string, number>
    ): BacktrackingState {
        return {
            classIndex,
            schedule: [...schedule],
            scheduledPeriodsToday: new Map(scheduledPeriodsToday),
            scheduledPeriodsThisWeek: new Map(scheduledPeriodsThisWeek)
        };
    }

    private restoreBacktrackingState(state: BacktrackingState): void {
        this.schedule = [...state.schedule];
    }

    public async scheduleWithBacktracking(
        sortedClasses: Class[],
        startDate: Date,
        maxBacktracks: number = 1000
    ): Promise<boolean> {
        let classIndex = 0;
        let backtracks = 0;
        const backtrackingStack: BacktrackingState[] = [];
        const scheduledPeriodsToday = new Map<string, number>();
        const scheduledPeriodsThisWeek = new Map<string, number>();
        let currentDate = new Date(startDate);

        while (classIndex < sortedClasses.length && backtracks < maxBacktracks) {
            const currentClass = sortedClasses[classIndex];
            let scheduled = false;

            // Try each day of the week
            for (let dayOffset = 0; dayOffset < 5 && !scheduled; dayOffset++) {
                currentDate = new Date(startDate);
                currentDate.setDate(currentDate.getDate() + dayOffset);
                
                // Reset daily counters if we're on a new day
                if (dayOffset > 0) {
                    scheduledPeriodsToday.clear();
                }

                // Try each period
                for (let period = 1; period <= 8 && !scheduled; period++) {
                    if (this.meetsConstraints(currentClass, currentDate, period as Period, scheduledPeriodsToday, scheduledPeriodsThisWeek)) {
                        // Save current state before making changes
                        backtrackingStack.push(this.saveBacktrackingState(
                            classIndex,
                            this.schedule,
                            scheduledPeriodsToday,
                            scheduledPeriodsThisWeek
                        ));

                        // Schedule the class
                        this.schedule.push({
                            classId: currentClass.id!,
                            assignedDate: new Date(currentDate),
                            period: period as Period
                        });

                        // Update counters
                        const todayCount = scheduledPeriodsToday.get(currentClass.id!) || 0;
                        const weekCount = scheduledPeriodsThisWeek.get(currentClass.id!) || 0;
                        scheduledPeriodsToday.set(currentClass.id!, todayCount + 1);
                        scheduledPeriodsThisWeek.set(currentClass.id!, weekCount + 1);

                        scheduled = true;
                        classIndex++;
                    }
                }
            }

            if (!scheduled) {
                if (backtrackingStack.length > 0) {
                    // Backtrack to last valid state
                    const lastState = backtrackingStack.pop()!;
                    classIndex = lastState.classIndex;
                    this.schedule = [...lastState.schedule];
                    scheduledPeriodsToday.clear();
                    scheduledPeriodsThisWeek.clear();
                    lastState.scheduledPeriodsToday.forEach((value, key) => {
                        scheduledPeriodsToday.set(key, value);
                    });
                    lastState.scheduledPeriodsThisWeek.forEach((value, key) => {
                        scheduledPeriodsThisWeek.set(key, value);
                    });
                    backtracks++;
                } else {
                    // No solution possible
                    this.schedule = [];
                    return false;
                }
            }
        }

        // If we hit the backtrack limit, consider it a failure
        if (backtracks >= maxBacktracks) {
            this.schedule = [];
            return false;
        }

        return classIndex >= sortedClasses.length;
    }

    private meetsConstraints(
        classDoc: Class,
        date: Date,
        period: Period,
        scheduledPeriodsToday: Map<string, number>,
        scheduledPeriodsThisWeek: Map<string, number>
    ): boolean {
        const classId = classDoc.id!;
        const periodsToday = scheduledPeriodsToday.get(classId) || 0;
        const periodsThisWeek = scheduledPeriodsThisWeek.get(classId) || 0;

        // Check daily and weekly limits per class
        if (periodsToday >= this.constraints.maxPeriodsPerDay) return false;
        if (periodsThisWeek >= this.constraints.maxPeriodsPerWeek) return false;

        // Check total periods per day across all classes
        const dateKey = date.toISOString().split('T')[0];
        const totalPeriodsToday = Array.from(scheduledPeriodsToday.values()).reduce((sum, count) => sum + count, 0);
        if (totalPeriodsToday >= this.constraints.maxPeriodsPerDay) return false;

        // Check consecutive periods constraint
        if (this.constraints.avoidConsecutivePeriods) {
            const hasAdjacentPeriod = this.schedule.some(entry => {
                if (entry.assignedDate.getTime() !== date.getTime()) return false;
                return Math.abs(entry.period - period) === 1;
            });
            if (hasAdjacentPeriod) return false;
        }

        // Check blackout periods
        const isBlackout = this.constraints.blackoutPeriods?.some(
            blackout =>
                blackout.date.getTime() === date.getTime() &&
                blackout.period === period
        );
        if (isBlackout) return false;

        // Check class-specific conflicts
        const dayOfWeek = (date.getDay() as DayOfWeek);
        const hasConflict = classDoc.defaultConflicts?.some(
            (conflict: Conflict) => 
                conflict.dayOfWeek === dayOfWeek &&
                conflict.period === period
        );
        if (hasConflict) return false;

        // Check if period is already booked
        const isPeriodBooked = this.schedule.some(entry =>
            entry.assignedDate.getTime() === date.getTime() &&
            entry.period === period
        );
        if (isPeriodBooked) return false;

        return true;
    }

    public evaluateScheduleQuality(): ScheduleQualityMetrics {
        const metrics: ScheduleQualityMetrics = {
            averageClassesPerDay: 0,
            standardDeviationClassesPerDay: 0,
            dayUtilization: 0,
            averageGapBetweenClasses: 0,
            minimumGapBetweenClasses: Infinity,
            consecutiveClassCount: 0,
            morningPeriodUtilization: 0,
            middayPeriodUtilization: 0,
            afternoonPeriodUtilization: 0,
            totalScore: 0,
            constraintSatisfactionRate: 1.0
        };

        const scheduleByDay = new Map<string, ScheduleEntry[]>();
        this.schedule.forEach(entry => {
            const dayKey = entry.assignedDate.toISOString().split('T')[0];
            if (!scheduleByDay.has(dayKey)) {
                scheduleByDay.set(dayKey, []);
            }
            scheduleByDay.get(dayKey)!.push(entry);
        });

        const classesPerDay = Array.from(scheduleByDay.values()).map(entries => entries.length);
        metrics.averageClassesPerDay = classesPerDay.reduce((sum, count) => sum + count, 0) / classesPerDay.length;
        
        const variance = classesPerDay.reduce((sum, count) => 
            sum + Math.pow(count - metrics.averageClassesPerDay, 2), 0) / classesPerDay.length;
        metrics.standardDeviationClassesPerDay = Math.sqrt(variance);

        const totalSchoolDays = Array.from(scheduleByDay.keys()).length;
        const expectedSchoolDays = Math.ceil(this.schedule.length / (this.constraints.maxPeriodsPerDay || 1));
        metrics.dayUtilization = totalSchoolDays / expectedSchoolDays;

        let morningPeriods = 0;
        let middayPeriods = 0;
        let afternoonPeriods = 0;
        let totalGaps = 0;
        let gapCount = 0;

        scheduleByDay.forEach(entries => {
            entries.sort((a, b) => a.period - b.period);
            
            for (let i = 0; i < entries.length; i++) {
                const period = entries[i].period;
                if (period <= 3) morningPeriods++;
                else if (period <= 5) middayPeriods++;
                else afternoonPeriods++;

                if (i > 0) {
                    const gap = entries[i].period - entries[i-1].period;
                    totalGaps += gap;
                    gapCount++;
                    metrics.minimumGapBetweenClasses = Math.min(metrics.minimumGapBetweenClasses, gap);
                    
                    if (gap === 1) {
                        metrics.consecutiveClassCount++;
                    }
                }
            }
        });

        const totalPeriods = this.schedule.length;
        metrics.morningPeriodUtilization = morningPeriods / totalPeriods;
        metrics.middayPeriodUtilization = middayPeriods / totalPeriods;
        metrics.afternoonPeriodUtilization = afternoonPeriods / totalPeriods;
        
        metrics.averageGapBetweenClasses = gapCount > 0 ? totalGaps / gapCount : 0;
        if (metrics.minimumGapBetweenClasses === Infinity) {
            metrics.minimumGapBetweenClasses = 0;
        }

        return metrics;
    }

    public async runOptimizationExperiment(
        classes: Class[],
        configs: SchedulerConfig[],
        iterationsPerConfig: number
    ): Promise<OptimizationResult[]> {
        const results: OptimizationResult[] = [];
        
        for (const config of configs) {
            this.config = config;
            let totalScore = 0;
            let successfulIterations = 0;
            let improvementCount = 0;
            const startTime = Date.now();
            let bestSchedule: ScheduleEntry[] = [];
            let bestMetrics: ScheduleQualityMetrics | null = null;

            for (let i = 0; i < iterationsPerConfig; i++) {
                await this.initialize(classes);
                const sortedClasses = this.sortClassesByConstraints(classes);
                const success = await this.scheduleWithBacktracking(sortedClasses, this.startDate);
                
                if (success) {
                    const metrics = this.evaluateScheduleQuality();
                    if (!bestMetrics || metrics.totalScore > bestMetrics.totalScore) {
                        bestMetrics = metrics;
                        bestSchedule = [...this.schedule];
                        improvementCount++;
                    }
                    totalScore += metrics.totalScore;
                    successfulIterations++;
                }
            }

            results.push({
                metrics: bestMetrics || this.evaluateScheduleQuality(),
                schedule: bestSchedule,
                config,
                iterationCount: iterationsPerConfig,
                improvementCount,
                runtime: Date.now() - startTime
            });
        }

        return results;
    }
} 